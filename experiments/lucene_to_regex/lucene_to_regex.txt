Project: Lucene-Style Regex Conversion and Data Extraction Module

Description:
This project focuses on creating a robust and modular Python module for
extracting and processing data from structured and unstructured text using
Lucene-style queries. The system converts Lucene syntax into regex patterns
and applies these patterns to extract data from input text or objects. The
implementation is designed for extensibility and efficiency, enabling
straightforward query customization and reusable pattern definitions.

Key Features:
1. **Lucene-Style Query Parsing**:
   - Supports `AND`, `OR`, and `NOT` logical operators.
   - Converts Lucene queries into regex patterns for complex searches.
   - Handles field-based queries (e.g., `datetime:2024*`) with modular pattern
     groups.

2. **Pattern Groups**:
   - Modularly defined patterns grouped by labels (e.g., `datetime`, `misc`).
   - Predefined regex patterns for dates, emails, URLs, file paths, and more.
   - Easily extendable to support additional data types.

3. **Match Extraction and Stitching**:
   - Extracts matches from text using labeled regex patterns.
   - Stitches contiguous matches into coherent results, avoiding fragmentation.
   - Deduplicates and normalizes extracted data for cleaner outputs.

4. **Boolean Logic Handling**:
   - Combines matches from multiple patterns using logical operators.
   - Supports combining terms (`AND`), alternations (`OR`), and exclusions
     (`NOT`) across fields.

5. **Dynamic Regex Construction**:
   - Ensures unique group names for patterns to avoid conflicts.
   - Integrates patterns from predefined groups dynamically during query
     processing.

Methodologies and Conventions:
- **Modularity**: Patterns are grouped into labeled categories to promote
  reusability and clarity.
- **Extensibility**: The structure supports adding new patterns or extending
  existing logic without significant refactoring.
- **Error Handling**: Comprehensive validation of queries and patterns, with
  detailed exceptions for invalid inputs.
- **Testing**: Iterative development with a focus on realistic test cases and
  debugging outputs for query validation and pattern matching.

File and Code Structure:
- `PATTERN_GROUPS`: A dictionary organizing regex patterns into logical
  groups (e.g., `datetime`, `misc`).
- `lucene_to_regex_refined`: Converts Lucene-style queries into regex, with
  full support for boolean logic.
- `extract_and_stitch`: Processes matches to merge contiguous data and
  normalize results.
- `extract_matches_from_group`: Simplifies the application of pattern groups
  to text.
- `extract_non_empty_matches`: Filters and deduplicates matches for clarity.

Assistant Findings:
- The modular structure of `PATTERN_GROUPS` is central to the system's
  extensibility and clarity.
- Stitching and deduplication ensure data consistency, which is critical for
  handling large or complex datasets.
- Handling boolean logic (`AND`, `OR`, `NOT`) across multiple patterns
  dynamically is a key strength of the module.
- Ensuring unique group names in regex generation prevents conflicts and
  improves reliability.

Guidelines for Future Work:
1. Expand `PATTERN_GROUPS` with additional patterns (e.g., IP addresses, custom
   log formats).
2. Optimize `lucene_to_regex_refined` to allow complex nested logic (e.g.,
   `(field1:value1 AND field2:value2) OR NOT field3:value3`).
3. Add configuration options for case sensitivity and pattern priority.
4. Integrate with external data processing libraries for broader analysis
   pipelines (e.g., pandas, spaCy).

This documentation provides a foundation for continuing and extending the
project, ensuring future interactions maintain consistency and align with the
original design principles.
